import tkinter as tk
from tkinter import scrolledtext, filedialog, messagebox, ttk
import os
from tkinter import font as tkfont
import pyperclip
import re


class GCodeParserTk:
    def __init__(self, root):
        self.root = root
        self.root.title("G-code to Rapid Converter")
        self.root.geometry("800x725")
        self.root.minsize(600, 700)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setup_styles()

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ttk.Frame(root, padding="10")
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.header = ttk.Label(
            self.main_frame,
            text="–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä G-code –≤ Rapid",
            font=('Helvetica', 14, 'bold')
        )
        self.header.pack(pady=(0, 15))

        # –ü–∞–Ω–µ–ª—å —Å G-code
        self.gcode_frame = ttk.LabelFrame(self.main_frame, text=" –ò—Å—Ö–æ–¥–Ω—ã–π G-code ", padding=10)
        self.gcode_frame.pack(fill=tk.BOTH, expand=True)

        self.gcode_edit = scrolledtext.ScrolledText(
            self.gcode_frame,
            width=60,
            height=15,
            font=('Consolas', 10),
            padx=5,
            pady=5,
            wrap=tk.NONE
        )
        self.gcode_edit.pack(fill=tk.BOTH, expand=True)
        self.gcode_edit.insert(tk.END, "–í—Å—Ç–∞–≤—å—Ç–µ G-code –∑–¥–µ—Å—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª...")

        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_frame = ttk.Frame(self.main_frame)
        self.settings_frame.pack(fill=tk.X, pady=10)

        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.left_column = ttk.Frame(self.settings_frame)
        self.left_column.pack(side=tk.LEFT, padx=5, fill=tk.BOTH, expand=True)

        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.right_column = ttk.Frame(self.settings_frame)
        self.right_column.pack(side=tk.LEFT, padx=5, fill=tk.BOTH, expand=True)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.create_labeled_entry(self.left_column, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:", "main", 0)
        self.create_labeled_entry(self.left_column, "–¢–æ—á–∫–∞ –æ—Ç—Å—á—ë—Ç–∞:", "defaultPoint", 1)
        self.create_labeled_entry(self.left_column, "I/O —Å–∏–≥–Ω–∞–ª:", "Spindle", 2)
        self.create_labeled_entry(self.right_column, "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", "tool0", 0)
        self.create_labeled_entry(self.right_column, "–°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:", "wobj0", 1)

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        self.button_frame = ttk.Frame(self.main_frame)
        self.button_frame.pack(fill=tk.X, pady=5)

        self.load_btn = ttk.Button(
            self.button_frame,
            text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª",
            command=self.load_file
        )
        self.load_btn.pack(side=tk.LEFT, padx=5)

        self.parse_btn = ttk.Button(
            self.button_frame,
            text="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å",
            command=self.parse_gcode
        )
        self.parse_btn.pack(side=tk.LEFT, padx=5)

        self.clear_btn = ttk.Button(
            self.button_frame,
            text="–û—á–∏—Å—Ç–∏—Ç—å",
            command=self.clear_all
        )
        self.clear_btn.pack(side=tk.LEFT, padx=5)

        # –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.result_frame = ttk.LabelFrame(self.main_frame, padding=10)
        self.result_frame.pack(fill=tk.BOTH, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.result_header = ttk.Frame(self.result_frame)
        self.result_header.pack(fill=tk.X)

        ttk.Label(
            self.result_header,
            text="–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
            font=('Helvetica', 10)
        ).pack(side=tk.LEFT)

        self.copy_btn = ttk.Button(
            self.result_header,
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            command=self.copy_to_clipboard,
            width=10
        )
        self.copy_btn.pack(side=tk.RIGHT, padx=5)

        self.result_edit = scrolledtext.ScrolledText(
            self.result_frame,
            width=60,
            height=15,
            font=('Consolas', 10),
            padx=5,
            pady=5,
            wrap=tk.NONE,
            state='disabled'
        )
        self.result_edit.pack(fill=tk.BOTH, expand=True)
        self.result_edit.insert(tk.END, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω Rapid –∫–æ–¥...")

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = ttk.Label(
            self.main_frame,
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            relief=tk.SUNKEN,
            anchor=tk.W,
            padding=(5, 2)
        )
        self.status_bar.pack(fill=tk.X, pady=(5, 0))

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.source_file_path = ""
        self.last_rapid_command = ""
        self.last_point = {'X': 0.0, 'Y': 0.0, 'Z': 0.0}
        self.prev_circle_point = None

    def setup_styles(self):
        style = ttk.Style()
        style.theme_use('clam')

        style.configure('TFrame', background='#f5f5f5')
        style.configure('TLabel', background='#f5f5f5')
        style.configure('TButton', padding=6, relief='flat', bordercolor='#ccc', borderwidth=1)
        style.map('TButton',
                  background=[('active', '#e6e6e6')],
                  bordercolor=[('active', '#adadad')])

        style.configure('TLabelframe', background='#f5f5f5', bordercolor='#ccc', borderwidth=1)
        style.configure('TLabelframe.Label', background='#f5f5f5')
        style.configure('TEntry', fieldbackground='white', bordercolor='#ccc', borderwidth=1, padding=5)

        default_font = tkfont.nametofont("TkDefaultFont")
        default_font.configure(size=10)

    def create_labeled_entry(self, parent, label_text, default_value, pady_top):
        frame = ttk.Frame(parent)
        frame.pack(fill=tk.X, pady=(pady_top * 10, 0))

        label = ttk.Label(frame, text=label_text, width=20, anchor=tk.W)
        label.pack(side=tk.LEFT)

        entry = ttk.Entry(frame, width=15)
        entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 0))
        entry.insert(0, default_value)

        if label_text == "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:":
            self.proc_entry = entry
        elif label_text == "–¢–æ—á–∫–∞ –æ—Ç—Å—á—ë—Ç–∞:":
            self.ref_entry = entry
        elif label_text == "I/O —Å–∏–≥–Ω–∞–ª:":
            self.io_signal_entry = entry
        elif label_text == "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:":
            self.tool_entry = entry
        elif label_text == "–°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:":
            self.wobj_entry = entry

    def copy_to_clipboard(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        content = self.result_edit.get("1.0", tk.END)
        if content.strip():
            pyperclip.copy(content)
            self.status_bar.config(text="–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        else:
            self.status_bar.config(text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

    def load_file(self):
        filename = filedialog.askopenfilename(
            filetypes=[("G-code Files", "*.nc *.gcode *.txt"), ("All Files", "*.*")],
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª G-code"
        )
        if filename:
            try:
                self.source_file_path = filename
                with open(filename, 'r') as file:
                    self.gcode_edit.delete(1.0, tk.END)
                    self.gcode_edit.insert(tk.END, file.read())
                self.status_bar.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {os.path.basename(filename)}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")
                self.status_bar.config(text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")

    def parse_gcode(self):
        gcode = self.gcode_edit.get(1.0, tk.END)
        if not gcode.strip():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–ª–µ G-code –ø—É—Å—Ç–æ!")
            return

        proc_name = self.proc_entry.get()
        ref_point = self.ref_entry.get()
        io_signal = self.io_signal_entry.get()
        tool = self.tool_entry.get()
        wobj = self.wobj_entry.get()

        try:
            rapid_code = self.convert_to_rapid(gcode, proc_name, ref_point, io_signal, tool, wobj)
            self.result_edit.config(state='normal')
            self.result_edit.delete(1.0, tk.END)
            self.result_edit.insert(tk.END, rapid_code)
            self.result_edit.config(state='disabled')

            self.save_rapid_file(rapid_code, proc_name)
            self.status_bar.config(text="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n{str(e)}")
            self.status_bar.config(text="–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

    def parse_gcode_line(self, line):
        """–†–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É G-–∫–æ–¥–∞, —Ä–∞–∑–¥–µ–ª—è—è –∫–æ–º–∞–Ω–¥—ã –¥–∞–∂–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤"""
        # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if line[0] == 'N' and line[1].isdigit():
            line = line.split(' ', 1)[-1].strip()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        pattern = r'([A-Z][-+]?\d*\.?\d*)'
        parts = re.findall(pattern, line)

        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä "G1X10" -> "G1", "X10")
        commands = []
        for part in parts:
            # –ò—â–µ–º –±—É–∫–≤—É –∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞ –Ω–µ–π —Ü–∏—Ñ—Ä—ã/–∑–Ω–∞–∫–∏
            match = re.match(r'([A-Z])([-+]?\d*\.?\d*)', part)
            if match:
                cmd = match.group(1)
                value = match.group(2)
                commands.append(f"{cmd}{value}" if value else cmd)

        return commands

    def convert_to_rapid(self, gcode, proc_name, ref_point, io_signal, tool, wobj):
        lines = gcode.split('\n')
        rapid_commands = []
        self.last_point = {'X': 0.0, 'Y': 0.0, 'Z': 0.0}
        self.last_rapid_command = ""
        self.prev_circle_point = None
        wobj_str = f",{wobj}" if wobj != "wobj0" else ""

        rapid_commands.append(f"GLOBAL PROC {proc_name}()")

        i = 0
        while i < len(lines):
            line = lines[i].strip()
            if not line:
                i += 1
                continue

            # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            commands = self.parse_gcode_line(line)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ M05 (–≤—ã–∫–ª—é—á–µ–Ω–∏–µ)
            if "M05" in commands or "M5" in commands:
                rapid_commands.append(f"  SetDO {io_signal}, false")
                i += 1
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ M03 (–≤–∫–ª—é—á–µ–Ω–∏–µ)
            if "M03" in commands or "M3" in commands:
                rapid_commands.append(f"  SetDO {io_signal}, true")
                i += 1
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏–µ M-–∫–æ–¥—ã
            if any(cmd in commands for cmd in ['G90', 'G71', 'M02', 'M30', 'G17']):
                i += 1
                continue

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            move_cmd = None
            params = {}

            for cmd in commands:
                if cmd.startswith(('G00', 'G01', 'G0', 'G1', 'G02', 'G03', 'G2', 'G3')):
                    move_cmd = cmd
                elif cmd[0] in ['X', 'Y', 'Z', 'I', 'J']:
                    try:
                        params[cmd[0]] = float(cmd[1:])
                    except ValueError:
                        pass

            if not move_cmd and any(c in params for c in ['X', 'Y', 'Z']):
                # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–π G-–∫–æ–º–∞–Ω–¥—ã, –Ω–æ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º G1
                move_cmd = 'G1'

            if move_cmd:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                for axis in ['X', 'Y', 'Z']:
                    if axis in params:
                        self.last_point[axis] = params[axis]

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                x = self.last_point['X']
                y = self.last_point['Y']
                z = -self.last_point['Z']  # –ò–Ω–≤–µ—Ä—Å–∏—è Z

                def format_coord(coord):
                    s = f"{coord:.4f}".rstrip('0').rstrip('.') if '.' in f"{coord:.4f}" else f"{coord}"
                    return s

                x_str = format_coord(x)
                y_str = format_coord(y)
                z_str = format_coord(z)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä—É–≥–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ (G02/G03)
                if move_cmd.startswith(('G02', 'G03', 'G2', 'G3')):
                    if self.prev_circle_point is None:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –¥—É–≥–∏
                        self.prev_circle_point = {
                            'X': x_str,
                            'Y': y_str,
                            'Z': z_str
                        }
                        i += 1
                    else:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É MoveC –∏–∑ –¥–≤—É—Ö —Ç–æ—á–µ–∫
                        start_point = f"Offs({ref_point},{self.prev_circle_point['X']},{self.prev_circle_point['Y']},{self.prev_circle_point['Z']})"
                        end_point = f"Offs({ref_point},{x_str},{y_str},{z_str})"

                        current_cmd = f"  MoveC {start_point},{end_point},v200,fine,{tool}{wobj_str}"
                        rapid_commands.append(current_cmd)
                        self.prev_circle_point = None
                        i += 1
                else:
                    # –õ–∏–Ω–µ–π–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                    current_cmd = f"  MoveL Offs({ref_point},{x_str},{y_str},{z_str}),v1000,fine,{tool}{wobj_str}"

                    if current_cmd != self.last_rapid_command:
                        rapid_commands.append(current_cmd)
                        self.last_rapid_command = current_cmd
                    i += 1
            else:
                i += 1

        rapid_commands.append("ENDPROC")
        rapid_commands.append("")

        return '\n'.join(rapid_commands)

    def save_rapid_file(self, rapid_code, proc_name):
        if not self.source_file_path:
            save_path = os.path.join(os.getcwd(), f"{proc_name}.txt")
        else:
            dirname = os.path.dirname(self.source_file_path)
            save_path = os.path.join(dirname, f"{proc_name}.txt")

        try:
            with open(save_path, 'w') as file:
                file.write(rapid_code)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{save_path}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")

    def clear_all(self):
        self.gcode_edit.delete(1.0, tk.END)
        self.proc_entry.delete(0, tk.END)
        self.proc_entry.insert(0, "main")
        self.ref_entry.delete(0, tk.END)
        self.ref_entry.insert(0, "defaultPoint")
        self.io_signal_entry.delete(0, tk.END)
        self.io_signal_entry.insert(0, "Spindle")
        self.tool_entry.delete(0, tk.END)
        self.tool_entry.insert(0, "tool0")
        self.wobj_entry.delete(0, tk.END)
        self.wobj_entry.insert(0, "wobj0")
        self.result_edit.config(state='normal')
        self.result_edit.delete(1.0, tk.END)
        self.result_edit.insert(tk.END, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω Rapid –∫–æ–¥...")
        self.result_edit.config(state='disabled')
        self.source_file_path = ""
        self.last_rapid_command = ""
        self.last_point = {'X': 0.0, 'Y': 0.0, 'Z': 0.0}
        self.prev_circle_point = None
        self.status_bar.config(text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


if __name__ == '__main__':
    root = tk.Tk()
    app = GCodeParserTk(root)
    root.mainloop()